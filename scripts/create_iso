#!/bin/sh

TODAY="$(date +%d%m%Y)"

# build the root file system
root_fs="$(mktemp -d)"
./scripts/build_rootfs "$root_fs" "$1"
if [ ! -f "$root_fs/boot/bzImage" ] ||
   [ ! -f "$root_fs/boot/initrd.xz" ] ||
   [ ! -f "$root_fs/boot/isolinux.bin" ]
then
	echo "Error: the root file system must contain:
  1) A kernel (/boot/bzImage)
  2) An initramfs archive (/boot/initrd.xz)
  3) A boot loader (/boot/isolinux.bin)"
	rm -rf "$root_fs"
	exit 1
fi

# create a temporary directory for the extracted ISO image contents
iso_root="$(mktemp -d)"
mkdir "$iso_root/boot" "$iso_root/isolinux"

# put the kernel, the boot loader and its configuration file in the image root,
# for BIOS boot
mv "$root_fs/boot/bzImage" "$iso_root/boot/"
mv "$root_fs/boot/initrd.xz" "$iso_root/boot/"
mv "$root_fs/boot/isolinux.bin" "$iso_root/isolinux/"
mv "$root_fs/boot/isohdpfx.bin" "$iso_root/isolinux/"
mv "$root_fs/boot/menu.c32" "$iso_root/isolinux/"
mv "$root_fs/boot/isolinux.cfg" "$iso_root/isolinux/"
rm -rf "$root_fs/boot"

# generate the root file system image
mksquashfs "$root_fs" \
           "$iso_root/boot/rootfs.sfs" \
           -comp xz \
           -Xbcj x86 \
           -b 512K \
           -no-exports
rm -rf "$root_fs"

# sign the root file system image
ed25519 -s \
        "$iso_root/boot/rootfs.sfs" \
        /etc/packlim/priv_key \
        /etc/packlim/pub_key > "$iso_root/boot/rootfs.sig"

# generate an ISO image
xorriso -as mkisofs \
        -iso-level 3 \
        -full-iso9660-filenames \
        -volid "RLSD_$TODAY" \
        -appid "RLSD $TODAY" \
        -eltorito-boot isolinux/isolinux.bin \
        -eltorito-catalog isolinux/boot.cat \
        -no-emul-boot -boot-load-size 4 -boot-info-table \
        -isohybrid-mbr "$iso_root/isolinux/isohdpfx.bin" \
        $uefi_flags \
        -output "images/iso/rlsd-$TODAY-$(basename "$1").iso" \
        "$iso_root"

# clean up
rm -rf "$iso_root"
