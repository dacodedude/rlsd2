diff -rupN linux-3.14.33-orig/security/Kconfig linux-3.14.33/security/Kconfig
--- linux-3.14.33-orig/security/Kconfig	2015-02-19 22:48:13.887730147 +0200
+++ linux-3.14.33/security/Kconfig	2015-02-19 22:48:19.939730023 +0200
@@ -122,6 +122,7 @@ source security/smack/Kconfig
 source security/tomoyo/Kconfig
 source security/apparmor/Kconfig
 source security/yama/Kconfig
+source security/rlsd/Kconfig
 
 source security/integrity/Kconfig
 
@@ -132,6 +133,7 @@ choice
 	default DEFAULT_SECURITY_TOMOYO if SECURITY_TOMOYO
 	default DEFAULT_SECURITY_APPARMOR if SECURITY_APPARMOR
 	default DEFAULT_SECURITY_YAMA if SECURITY_YAMA
+	default DEFAULT_SECURITY_RLSD if SECURITY_RLSD
 	default DEFAULT_SECURITY_DAC
 
 	help
@@ -153,6 +155,9 @@ choice
 	config DEFAULT_SECURITY_YAMA
 		bool "Yama" if SECURITY_YAMA=y
 
+	config DEFAULT_SECURITY_RLSD
+		bool "RLSD" if SECURITY_RLSD=y
+	
 	config DEFAULT_SECURITY_DAC
 		bool "Unix Discretionary Access Controls"
 
@@ -165,6 +170,7 @@ config DEFAULT_SECURITY
 	default "tomoyo" if DEFAULT_SECURITY_TOMOYO
 	default "apparmor" if DEFAULT_SECURITY_APPARMOR
 	default "yama" if DEFAULT_SECURITY_YAMA
+	default "rlsd" if DEFAULT_SECURITY_RLSD
 	default "" if DEFAULT_SECURITY_DAC
 
 endmenu
diff -rupN linux-3.14.33-orig/security/Makefile linux-3.14.33/security/Makefile
--- linux-3.14.33-orig/security/Makefile	2015-02-19 22:48:13.887730147 +0200
+++ linux-3.14.33/security/Makefile	2015-02-19 22:48:19.939730023 +0200
@@ -8,6 +8,7 @@ subdir-$(CONFIG_SECURITY_SMACK)		+= smac
 subdir-$(CONFIG_SECURITY_TOMOYO)        += tomoyo
 subdir-$(CONFIG_SECURITY_APPARMOR)	+= apparmor
 subdir-$(CONFIG_SECURITY_YAMA)		+= yama
+subdir-$(CONFIG_SECURITY_RLSD)		+= rlsd
 
 # always enable default capabilities
 obj-y					+= commoncap.o
@@ -22,6 +23,7 @@ obj-$(CONFIG_AUDIT)			+= lsm_audit.o
 obj-$(CONFIG_SECURITY_TOMOYO)		+= tomoyo/built-in.o
 obj-$(CONFIG_SECURITY_APPARMOR)		+= apparmor/built-in.o
 obj-$(CONFIG_SECURITY_YAMA)		+= yama/built-in.o
+obj-$(CONFIG_SECURITY_RLSD)		+= rlsd/built-in.o
 obj-$(CONFIG_CGROUP_DEVICE)		+= device_cgroup.o
 
 # Object integrity file lists
diff -rupN linux-3.14.33-orig/security/rlsd/Kconfig linux-3.14.33/security/rlsd/Kconfig
--- linux-3.14.33-orig/security/rlsd/Kconfig	1970-01-01 02:00:00.000000000 +0200
+++ linux-3.14.33/security/rlsd/Kconfig	2015-02-19 22:48:19.939730023 +0200
@@ -0,0 +1,10 @@
+config SECURITY_RLSD
+	bool "RLSD support"
+	depends on SECURITY
+	select SECURITYFS
+	select SECURITY_PATH
+	default n
+	help
+	  This selects the RLSD security module.
+
+	  If you are unsure how to answer this question, answer N.
diff -rupN linux-3.14.33-orig/security/rlsd/Makefile linux-3.14.33/security/rlsd/Makefile
--- linux-3.14.33-orig/security/rlsd/Makefile	1970-01-01 02:00:00.000000000 +0200
+++ linux-3.14.33/security/rlsd/Makefile	2015-02-19 22:48:19.939730023 +0200
@@ -0,0 +1,3 @@
+obj-$(CONFIG_SECURITY_RLSD) := rlsd.o
+
+rlsd-y := rlsd_lsm.o
diff -rupN linux-3.14.33-orig/security/rlsd/rlsd_lsm.c linux-3.14.33/security/rlsd/rlsd_lsm.c
--- linux-3.14.33-orig/security/rlsd/rlsd_lsm.c	1970-01-01 02:00:00.000000000 +0200
+++ linux-3.14.33/security/rlsd/rlsd_lsm.c	2015-02-19 22:48:42.031729570 +0200
@@ -0,0 +1,314 @@
+/*
+ * RLSD Linux Security Module
+ *
+ * Author: Dima Krasner <dima@dimakrasner.com>
+ *
+ */
+
+#include <linux/security.h>
+#include <linux/sched.h>
+#include <linux/mount.h>
+#include <linux/fs.h>
+#include <linux/ptrace.h>
+#include <linux/prctl.h>
+#include <linux/mman.h>
+#include <linux/binfmts.h>
+#include <linux/cred.h>
+#include <linux/dcache.h>
+#include <linux/stat.h>
+#include <linux/path.h>
+#ifdef CONFIG_SECURITY_NETWORK
+#	include <linux/socket.h>
+#endif
+#include <linux/types.h>
+#include <linux/printk.h>
+#include <linux/string.h>
+
+static bool rlsd_enabled = 1;
+
+static int __init rlsd_enabled_setup(char *str)
+{
+	unsigned long enabled;
+	int error;
+	if (str) {
+		error = strict_strtoul(str, 0, &enabled);
+		if (!error)
+			rlsd_enabled = enabled ? 1 : 0;
+	}
+	return 1;
+}
+
+__setup("secure=", rlsd_enabled_setup);
+
+static int rlsd_ptrace_traceme(struct task_struct *parent)
+{
+	char name[sizeof(parent->comm)];
+	struct task_struct *child;
+
+	if (!parent)
+		return -EINVAL;
+
+	child = current;
+	printk(KERN_ALERT "rlsd: denied PTRACE_TRACEME from %lu (%s)\n",
+	       (unsigned long) child->pid,
+	       get_task_comm(name, child));
+	return -EPERM;
+}
+
+static int rlsd_ptrace_access_check(struct task_struct *child,
+                                    unsigned int mode)
+{
+	char pname[sizeof(child->comm)];
+	struct task_struct *parent;
+
+	if (!child)
+		return -EINVAL;
+
+	if (PTRACE_MODE_ATTACH != mode)
+		return cap_ptrace_access_check(child, mode);
+
+	/* access child->comm directly - ptrace_may_access() (kernel/ptrace.c)
+	 * already locks */
+	parent = current;
+	printk(KERN_ALERT "rlsd: denied attach of %lu (%s) to %lu (%s)\n",
+	       (unsigned long) parent->pid,
+	       get_task_comm(pname, parent),
+	       (unsigned long) child->pid,
+	       child->comm);
+	return -EPERM;
+}
+
+static int rlsd_sb_umount(struct vfsmount *mnt, int flags)
+{
+	char name[FIELD_SIZEOF(struct task_struct, comm)];
+	struct task_struct *tsk;
+
+	if (!mnt)
+		return -EINVAL;
+	if (!mnt->mnt_sb)
+		return -EINVAL;
+	if (!mnt->mnt_sb->s_type)
+		return -EINVAL;
+	if (!mnt->mnt_sb->s_type->name)
+		return -EINVAL;
+
+	if ((0 == strcmp("proc", mnt->mnt_sb->s_type->name)) ||
+	    (0 == strcmp("sysfs", mnt->mnt_sb->s_type->name)) ||
+	    (0 == strcmp("devtmpfs", mnt->mnt_sb->s_type->name)) ||
+	    (0 == strcmp("devpts", mnt->mnt_sb->s_type->name))) {
+		tsk = current;
+		printk(KERN_ALERT "rlsd: denied unmount of %s from %lu (%s)\n",
+		       mnt->mnt_sb->s_type->name,
+		       (unsigned long) tsk->pid,
+		       get_task_comm(name, tsk));
+		return -EPERM;
+	}
+
+	if ((mnt->mnt_sb->s_subtype) &&
+	    (mnt->mnt_sb->s_subtype[0]) &&
+	    (0 == strcmp("fuse", mnt->mnt_sb->s_type->name)) &&
+	    ((0 == strcmp("logfence", mnt->mnt_sb->s_subtype)) ||
+	     (0 == strcmp("elfence", mnt->mnt_sb->s_subtype)))) {
+		tsk = current;
+		printk(KERN_ALERT "rlsd: denied unmount of %s.%s from %lu (%s)\n",
+		       mnt->mnt_sb->s_type->name,
+		       mnt->mnt_sb->s_subtype,
+		       (unsigned long) tsk->pid,
+		       get_task_comm(name, tsk));
+		return -EPERM;
+	}
+
+	return 0;
+}
+
+static inline int rlsd_task_prctl(int option,
+                                  unsigned long arg2,
+                                  unsigned long arg3,
+                                  unsigned long arg4,
+                                  unsigned long arg5)
+{
+	char name[FIELD_SIZEOF(struct task_struct, comm)];
+	struct task_struct *tsk;
+
+	if (PR_SET_NAME != option)
+		return 0;
+
+	tsk = current;
+	printk(KERN_ALERT "rlsd: denied PR_SET_NAME from %lu (%s)\n",
+	       (unsigned long) tsk->pid,
+	       get_task_comm(name, tsk));
+	return -EINVAL;
+}
+
+static int rlsd_mmap_file(struct file *file,
+                          unsigned long reqprot,
+                          unsigned long prot,
+                          unsigned long flags)
+{
+	char name[FIELD_SIZEOF(struct task_struct, comm)];
+	struct task_struct *tsk;
+
+	if (0 == (PROT_EXEC & prot))
+		return 0;
+
+	if (0 != (MAP_ANONYMOUS & prot))
+		goto deny;
+
+	if ((0 == strcmp("rootfs", file->f_path.mnt->mnt_sb->s_type->name)) ||
+	    ((file->f_path.mnt->mnt_sb->s_subtype) &&
+	     (file->f_path.mnt->mnt_sb->s_subtype[0]) &&
+	     (0 == strcmp("fuse", file->f_path.mnt->mnt_sb->s_type->name)) &&
+	     (0 == strcmp("elfence", file->f_path.mnt->mnt_sb->s_subtype))))
+		return 0;
+
+deny:
+	tsk = current;
+	printk(KERN_ALERT "rlsd: denied PROT_EXEC mapping from %lu (%s)\n",
+	       (unsigned long) tsk->pid,
+	       get_task_comm(name, tsk));
+
+	return -EPERM;
+}
+
+static int rlsd_file_mprotect(struct vm_area_struct *vma,
+                              unsigned long reqprot,
+                              unsigned long prot)
+{
+	char name[FIELD_SIZEOF(struct task_struct, comm)];
+	struct task_struct *tsk;
+
+	if (0 == (PROT_EXEC & prot))
+		return 0;
+
+	tsk = current;
+	printk(KERN_ALERT "rlsd: denied PROT_EXEC re-mapping from %lu (%s)\n",
+	       (unsigned long) tsk->pid,
+	       get_task_comm(name, tsk));
+	return -EPERM;
+}
+
+int rlsd_bprm_set_creds(struct linux_binprm *bprm)
+{
+	char name[FIELD_SIZEOF(struct task_struct, comm)];
+	struct task_struct *tsk;
+	int ret;
+	kuid_t euid;
+
+	ret = cap_bprm_set_creds(bprm);
+	if (0 > ret)
+		return ret;
+
+	euid = current_euid();
+	if ((uid_eq(euid, GLOBAL_ROOT_UID)) ||
+	    ((uid_eq(euid, bprm->cred->euid)) &&
+	     (gid_eq(current_egid(), bprm->cred->egid))))
+		return 0;
+
+	tsk = current;
+	printk(KERN_ALERT "rlsd: denied %u:%u creds from %lu (%s)\n",
+	       (unsigned int) bprm->cred->euid.val,
+	       (unsigned int) bprm->cred->egid.val,
+	       (unsigned long) tsk->pid,
+	       get_task_comm(name, tsk));
+	return -EPERM;
+}
+
+static inline int rlsd_inode_create(struct inode *dir,
+                                    struct dentry *dentry,
+                                    umode_t mode)
+{
+	char name[FIELD_SIZEOF(struct task_struct, comm)];
+	struct task_struct *tsk;
+
+	if ((uid_eq(current_euid(), GLOBAL_ROOT_UID)) ||
+	    (S_ISDIR(mode)) ||
+	    (0 == (mode & S_IXUGO)))
+		return 0;
+
+	tsk = current;
+	printk(KERN_ALERT "rlsd: denied create from %lu (%s)\n",
+	       (unsigned long) tsk->pid,
+	       get_task_comm(name, tsk));
+	return -EPERM;
+}
+
+static inline int rlsd_path_chmod(struct path *path, umode_t mode)
+{
+	char name[FIELD_SIZEOF(struct task_struct, comm)];
+	struct task_struct *tsk;
+
+	if ((uid_eq(current_euid(), GLOBAL_ROOT_UID)) ||
+	    (NULL == path->dentry->d_inode) ||
+	    (S_ISDIR(path->dentry->d_inode->i_mode)) ||
+	    (0 == (mode & S_IXUGO)))
+		return 0;
+
+	tsk = current;
+	printk(KERN_ALERT "rlsd: denied chmod from %lu (%s)\n",
+	       (unsigned long) tsk->pid,
+	       get_task_comm(name, tsk));
+	return -EPERM;
+}
+
+#ifdef CONFIG_SECURITY_NETWORK
+static int rlsd_socket_listen(struct socket *sock, int backlog)
+{
+	char name[FIELD_SIZEOF(struct task_struct, comm)];
+	struct task_struct *tsk;
+
+	if (uid_eq(current_euid(), GLOBAL_ROOT_UID))
+		return 0;
+
+	tsk = current;
+	printk(KERN_ALERT "rlsd: denied listen from %lu (%s)\n",
+	       (unsigned long) tsk->pid,
+	       get_task_comm(name, tsk));
+	return -EPERM;
+}
+#endif
+
+static struct security_operations rlsd_ops = {
+	.name			= "rlsd",
+
+	.ptrace_access_check	= rlsd_ptrace_access_check,
+	.ptrace_traceme		= rlsd_ptrace_traceme,
+
+	.sb_umount		= rlsd_sb_umount,
+
+	.mmap_file		= rlsd_mmap_file,
+	.file_mprotect		= rlsd_file_mprotect,
+
+	.bprm_set_creds		= rlsd_bprm_set_creds,
+
+	.path_chmod		= rlsd_path_chmod,
+	.inode_create		= rlsd_inode_create,
+
+#ifndef CONFIG_SECURITY_NETWORK
+	.task_prctl		= rlsd_task_prctl
+#else
+	.task_prctl		= rlsd_task_prctl,
+
+	.socket_listen		= rlsd_socket_listen
+#endif
+};
+
+static __init int rlsd_init(void)
+{
+	if (!rlsd_enabled) {
+		printk(KERN_WARNING "rlsd: disabled.\n");
+		return 0;
+	}
+
+	if (!security_module_enable(&rlsd_ops))
+		return 0;
+
+	if (register_security(&rlsd_ops)) {
+		panic("rlsd: kernel registration failed.\n");
+	}
+
+	printk(KERN_INFO "rlsd: enabled.\n");
+
+	return 0;
+}
+
+security_initcall(rlsd_init);
