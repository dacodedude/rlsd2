diff -rup linux-4.1-orig/init/main.c linux-4.1/init/main.c
--- linux-4.1-orig/init/main.c	2015-06-22 11:44:44.321167432 +0300
+++ linux-4.1/init/main.c	2015-06-22 11:59:42.421620866 +0300
@@ -159,7 +159,7 @@ static int __init set_reset_devices(char
 __setup("reset_devices", set_reset_devices);
 
 static const char *argv_init[MAX_INIT_ARGS+2] = { "init", NULL, };
-const char *envp_init[MAX_INIT_ENVS+2] = { "HOME=/", "TERM=linux", NULL, };
+const char *envp_init[MAX_INIT_ENVS+2] = { "TERM=linux", NULL, };
 static const char *panic_later, *panic_param;
 
 extern const struct obs_kernel_param __setup_start[], __setup_end[];
@@ -959,10 +959,7 @@ static int __ref kernel_init(void *unuse
 		panic("Requested init %s failed (error %d).",
 		      execute_command, ret);
 	}
-	if (!try_to_run_init_process("/sbin/init") ||
-	    !try_to_run_init_process("/etc/init") ||
-	    !try_to_run_init_process("/bin/init") ||
-	    !try_to_run_init_process("/bin/sh"))
+	if (!try_to_run_init_process("/bin/init"))
 		return 0;
 
 	panic("No working init found.  Try passing init= option to kernel. "
@@ -1012,7 +1009,7 @@ static noinline void __init kernel_init_
 	 */
 
 	if (!ramdisk_execute_command)
-		ramdisk_execute_command = "/init";
+		ramdisk_execute_command = "/bin/init";
 
 	if (sys_access((const char __user *) ramdisk_execute_command, 0) != 0) {
 		ramdisk_execute_command = NULL;
diff -rup linux-4.1-orig/kernel/kmod.c linux-4.1/kernel/kmod.c
--- linux-4.1-orig/kernel/kmod.c	2015-06-22 11:44:45.085171218 +0300
+++ linux-4.1/kernel/kmod.c	2015-06-22 11:59:12.745473715 +0300
@@ -60,11 +60,11 @@ static DECLARE_RWSEM(umhelper_sem);
 /*
 	modprobe_path is set via /proc/sys.
 */
-char modprobe_path[KMOD_PATH_LEN] = "/sbin/modprobe";
+char modprobe_path[KMOD_PATH_LEN] = "/bin/modprobe";
 
 static void free_modprobe_argv(struct subprocess_info *info)
 {
-	kfree(info->argv[3]); /* check call_modprobe() */
+	kfree(info->argv[1]); /* check call_modprobe() */
 	kfree(info->argv);
 }
 
@@ -72,13 +72,11 @@ static int call_modprobe(char *module_na
 {
 	struct subprocess_info *info;
 	static char *envp[] = {
-		"HOME=/",
-		"TERM=linux",
-		"PATH=/sbin:/usr/sbin:/bin:/usr/bin",
+		"PATH=/bin",
 		NULL
 	};
 
-	char **argv = kmalloc(sizeof(char *[5]), GFP_KERNEL);
+	char **argv = kmalloc(sizeof(char *[4]), GFP_KERNEL);
 	if (!argv)
 		goto out;
 
@@ -87,10 +85,8 @@ static int call_modprobe(char *module_na
 		goto free_argv;
 
 	argv[0] = modprobe_path;
-	argv[1] = "-q";
-	argv[2] = "--";
-	argv[3] = module_name;	/* check free_modprobe_argv() */
-	argv[4] = NULL;
+	argv[1] = module_name;	/* check free_modprobe_argv() */
+	argv[2] = NULL;
 
 	info = call_usermodehelper_setup(modprobe_path, argv, envp, GFP_KERNEL,
 					 NULL, free_modprobe_argv, NULL);
diff -rup linux-4.1-orig/kernel/reboot.c linux-4.1/kernel/reboot.c
--- linux-4.1-orig/kernel/reboot.c	2015-06-22 11:44:45.097171278 +0300
+++ linux-4.1/kernel/reboot.c	2015-06-22 12:00:28.509849318 +0300
@@ -386,15 +386,14 @@ void ctrl_alt_del(void)
 		kill_cad_pid(SIGINT, 1);
 }
 
-char poweroff_cmd[POWEROFF_CMD_PATH_LEN] = "/sbin/poweroff";
-static const char reboot_cmd[] = "/sbin/reboot";
+char poweroff_cmd[POWEROFF_CMD_PATH_LEN] = "/bin/poweroff";
+static const char reboot_cmd[] = "/bin/reboot";
 
 static int run_cmd(const char *cmd)
 {
 	char **argv;
 	static char *envp[] = {
-		"HOME=/",
-		"PATH=/sbin:/bin:/usr/sbin:/usr/bin",
+		"PATH=/bin",
 		NULL
 	};
 	int ret;
